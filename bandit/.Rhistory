# ---------------- COMBINE (1x4) ----------------
p1 <- p1 + theme(legend.position="none")
p2 <- p2 + theme(legend.position="none")
p3 <- p3 + theme(legend.position="none")
p4 <- p4 + theme(legend.position="none")
combined <- (p1 | p2) / (p3 | p4)+
plot_layout(guides="collect") & theme(legend.position="bottom")
# ---------------- SAVE ----------------
ggsave("plots/combined_comparison_2x2.pdf", combined, width=14, height=10)
ggsave("plots/combined_comparison_2x2.png", combined, width=14, height=10, dpi=300)
message("Combined 2x2 plot with shared legend saved in 'plots/'")
# ---------------- COLORS ----------------
dark2_colors <- c("Human"="#929eab",
"Gemini 2.5"="#84addc",
"DeepSeek"="#ffd47d",
"GPT-4.1"="#6ad1a3")
# ---------------- PLOTS ----------------
if (!dir.exists("plots")) dir.create("plots")
make_plot <- function(df, yvar, ylab, filename) {
p <- ggplot(df, aes(x=condition, y=.data[[yvar]], color=model)) +
geom_boxplot(
width=0.15, outlier.shape=NA, fill=NA, alpha=1.0,
position=position_dodge(width=0.7)
) +
geom_point(
alpha=0.5, size=0.8, shape=1,
position=position_jitterdodge(jitter.width=0.12, dodge.width=0.7)
) +
scale_color_manual(values=dark2_colors) +
scale_x_discrete(labels=c(
"Human"="Human",
"T0.0_P0.5"="Temp=0.0, Top-p=0.5",
"T1.0_P0.5"="Temp=1.0, Top-p=0.5",
"T1.0_P1.0"="Temp=1.0, Top-p=1.0",
"T2.0_P1.0"="Temp=2.0, Top-p=1.0"
)) +
labs(x="Condition", y=ylab, color="Model") +
theme_bw(base_size=9) +
theme(axis.text.x=element_text(hjust=0.5))
ggsave(filename, p, width=10, height=5)
return(p)
}
# Reward
p1 <- make_plot(merged_df, "reward", "Total Reward", "plots/reward_score.pdf")
# Target choice %
p2 <- make_plot(merged_df, "X", "Target Option Count", "plots/target_option.pdf")
# Loss shift (%)
p3 <- make_plot(merged_df %>% mutate(loss_shift = loss_shift*100),
"loss_shift", "No-reward Switch %", "plots/loss_shift.pdf")
# Reward shift (%)
p4 <- make_plot(merged_df %>% mutate(reward_shift = reward_shift*100),
"reward_shift", "Reward Switch %", "plots/reward_shift.pdf")
message("Plots saved with correct legend labels in 'plots/'")
# ---------------- COMBINE (1x4) ----------------
p1 <- p1 + theme(legend.position="none")
p2 <- p2 + theme(legend.position="none")
p3 <- p3 + theme(legend.position="none")
p4 <- p4 + theme(legend.position="none")
combined <- (p1 | p2) / (p3 | p4)+
plot_layout(guides="collect") & theme(legend.position="bottom")
# ---------------- SAVE ----------------
ggsave("plots/combined_comparison_2x2.pdf", combined, width=14, height=10)
ggsave("plots/combined_comparison_2x2.png", combined, width=14, height=10, dpi=300)
message("Combined 2x2 plot with shared legend saved in 'plots/'")
make_plot <- function(df, yvar, ylab, filename) {
p <- ggplot(df, aes(x=condition, y=.data[[yvar]], fill=model)) +
geom_boxplot(
width=0.15, outlier.shape=NA, fill=NA, alpha=1.0,
position=position_dodge(width=0.7)
) +
geom_point(
alpha=0.5, size=0.8, shape=1,
position=position_jitterdodge(jitter.width=0.12, dodge.width=0.7)
) +
scale_color_manual(values=dark2_colors) +
scale_x_discrete(labels=c(
"Human"="Human",
"T0.0_P0.5"="Temp=0.0, Top-p=0.5",
"T1.0_P0.5"="Temp=1.0, Top-p=0.5",
"T1.0_P1.0"="Temp=1.0, Top-p=1.0",
"T2.0_P1.0"="Temp=2.0, Top-p=1.0"
)) +
labs(x="Condition", y=ylab, color="Model") +
theme_bw(base_size=9) +
theme(axis.text.x=element_text(hjust=0.5))
ggsave(filename, p, width=10, height=5)
return(p)
}
# Reward
p1 <- make_plot(merged_df, "reward", "Total Reward", "plots/reward_score.pdf")
# Target choice %
p2 <- make_plot(merged_df, "X", "Target Option Count", "plots/target_option.pdf")
# Loss shift (%)
p3 <- make_plot(merged_df %>% mutate(loss_shift = loss_shift*100),
"loss_shift", "No-reward Switch %", "plots/loss_shift.pdf")
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyr)
library(patchwork)   # for combining plots
# ---------------- HELPERS ----------------
frame2list <- function(tbl) {
subj_ids <- unique(tbl$id)
lst <- list()
for (sid in subj_ids) {
DT_subj <- tbl[tbl$id == sid, ]
lst[[as.character(sid)]] <- DT_subj
}
return(lst)
}
loss_shift_fun <- function(lst) {
loss_shift <- c()
reward_shift <- c()
for (sid in names(lst)) {
DT_subj <- lst[[sid]]
choice <- DT_subj$action
reward <- DT_subj$reward
shifts <- diff(choice) != 0
loss_trials <- which(reward == 0 & seq_along(reward) < length(reward))
reward_trials <- which(reward == 1 & seq_along(reward) < length(reward))
loss_shift <- c(loss_shift, mean(shifts[loss_trials], na.rm = TRUE))
reward_shift <- c(reward_shift, mean(shifts[reward_trials], na.rm = TRUE))
}
return(list(
loss_mean_sub = loss_shift,
reward_mean_sub = reward_shift
))
}
# ---------------- HUMAN DATA ----------------
human_dynamic <- read.csv('human_data/merged_dynamic.csv')
human_static  <- read.csv('human_data/merged_static.csv')
human_combined <- rbind(human_dynamic, human_static)
human_combined$X <- NULL
colnames(human_combined) <- c("choice", "reward", "id", "block", "schedule_type")
# Force id to character
human_combined$id <- as.character(human_combined$id)
# Add metadata
human_combined$model <- "Human"
human_combined$condition <- "Human"
# ---------------- LLM DATA ----------------
all_data <- list()
for (model in models) {
for (lv in levels) {
temp <- lv$temp; topp <- lv$topp
file <- file.path("sim_data", model, "merged",
paste0(model, "-", temp, "-", topp, ".csv"))
if (!file.exists(file)) {
message("Missing file: ", file)
next
}
df <- read.csv(file)
df$id <- as.character(df$id)
df$model <- model
df$condition <- paste0("T", temp, "_P", topp)
all_data[[length(all_data) + 1]] <- df
}
}
llm_data <- bind_rows(all_data)
# ---------------- COMBINE ----------------
combined_data <- bind_rows(
human_combined %>% select(id, trial=block, action=choice, reward, model, condition),
llm_data %>% select(id, trial, action, reward, model, condition)
)
# ---------------- SUMMARIES ----------------
reward_sum <- combined_data %>%
group_by(model, condition, id) %>%
summarise(reward = sum(reward, na.rm = TRUE), .groups="drop")
choice_counts <- combined_data %>%
group_by(model, condition, id) %>%
summarise(X = sum(action == 0, na.rm = TRUE),
Y = sum(action == 1, na.rm = TRUE), .groups="drop")
shift_list <- combined_data %>%
group_by(model, condition, id) %>%
group_split() %>%
lapply(function(df) {
tbl <- as.data.table(df)
lst <- frame2list(tbl)
shift <- loss_shift_fun(lst)
data.frame(
id = unique(tbl$id),
loss_shift = shift$loss_mean_sub,
reward_shift = shift$reward_mean_sub,
model = unique(tbl$model),
condition = unique(tbl$condition)
)
}) %>%
bind_rows()
merged_df <- reward_sum %>%
left_join(choice_counts, by=c("model","condition","id")) %>%
left_join(shift_list, by=c("model","condition","id"))
# ---------------- CLEAN MODEL LABELS ----------------
merged_df <- merged_df %>%
mutate(model = recode(model,
"gemini-2.5-flash-lite" = "Gemini 2.5",
"deepseek-chat" = "DeepSeek",
"gpt-4.1" = "GPT-4.1",
"Human" = "Human"))
# ---------------- COLORS ----------------
dark2_colors <- c("Human"="#929eab",
"Gemini 2.5"="#84addc",
"DeepSeek"="#ffd47d",
"GPT-4.1"="#6ad1a3")
# ---------------- PLOTS ----------------
if (!dir.exists("plots")) dir.create("plots")
make_plot <- function(df, yvar, ylab, filename) {
p <- ggplot(df, aes(x=condition, y=.data[[yvar]], fill=model)) +
geom_boxplot(
width=0.15, outlier.shape=NA, fill=NA, alpha=1.0,
position=position_dodge(width=0.7)
) +
geom_point(
alpha=0.5, size=0.8, shape=1,
position=position_jitterdodge(jitter.width=0.12, dodge.width=0.7)
) +
scale_color_manual(values=dark2_colors) +
scale_x_discrete(labels=c(
"Human"="Human",
"T0.0_P0.5"="Temp=0.0, Top-p=0.5",
"T1.0_P0.5"="Temp=1.0, Top-p=0.5",
"T1.0_P1.0"="Temp=1.0, Top-p=1.0",
"T2.0_P1.0"="Temp=2.0, Top-p=1.0"
)) +
labs(x="Condition", y=ylab, color="Model") +
theme_bw(base_size=9) +
theme(axis.text.x=element_text(hjust=0.5))
ggsave(filename, p, width=10, height=5)
return(p)
}
# Reward
p1 <- make_plot(merged_df, "reward", "Total Reward", "plots/reward_score.pdf")
# Target choice %
p2 <- make_plot(merged_df, "X", "Target Option Count", "plots/target_option.pdf")
# Loss shift (%)
p3 <- make_plot(merged_df %>% mutate(loss_shift = loss_shift*100),
"loss_shift", "No-reward Switch %", "plots/loss_shift.pdf")
# Reward shift (%)
p4 <- make_plot(merged_df %>% mutate(reward_shift = reward_shift*100),
"reward_shift", "Reward Switch %", "plots/reward_shift.pdf")
message("Plots saved with correct legend labels in 'plots/'")
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyr)
library(patchwork)   # for combining plots
# ---------------- HELPERS ----------------
frame2list <- function(tbl) {
subj_ids <- unique(tbl$id)
lst <- list()
for (sid in subj_ids) {
DT_subj <- tbl[tbl$id == sid, ]
lst[[as.character(sid)]] <- DT_subj
}
return(lst)
}
loss_shift_fun <- function(lst) {
loss_shift <- c()
reward_shift <- c()
for (sid in names(lst)) {
DT_subj <- lst[[sid]]
choice <- DT_subj$action
reward <- DT_subj$reward
shifts <- diff(choice) != 0
loss_trials <- which(reward == 0 & seq_along(reward) < length(reward))
reward_trials <- which(reward == 1 & seq_along(reward) < length(reward))
loss_shift <- c(loss_shift, mean(shifts[loss_trials], na.rm = TRUE))
reward_shift <- c(reward_shift, mean(shifts[reward_trials], na.rm = TRUE))
}
return(list(
loss_mean_sub = loss_shift,
reward_mean_sub = reward_shift
))
}
# ---------------- HUMAN DATA ----------------
human_dynamic <- read.csv('human_data/merged_dynamic.csv')
human_static  <- read.csv('human_data/merged_static.csv')
human_combined <- rbind(human_dynamic, human_static)
human_combined$X <- NULL
colnames(human_combined) <- c("choice", "reward", "id", "block", "schedule_type")
# Force id to character
human_combined$id <- as.character(human_combined$id)
# Add metadata
human_combined$model <- "Human"
human_combined$condition <- "Human"
# ---------------- LLM DATA ----------------
all_data <- list()
for (model in models) {
for (lv in levels) {
temp <- lv$temp; topp <- lv$topp
file <- file.path("sim_data", model, "merged",
paste0(model, "-", temp, "-", topp, ".csv"))
if (!file.exists(file)) {
message("Missing file: ", file)
next
}
df <- read.csv(file)
df$id <- as.character(df$id)
df$model <- model
df$condition <- paste0("T", temp, "_P", topp)
all_data[[length(all_data) + 1]] <- df
}
}
llm_data <- bind_rows(all_data)
# ---------------- COMBINE ----------------
combined_data <- bind_rows(
human_combined %>% select(id, trial=block, action=choice, reward, model, condition),
llm_data %>% select(id, trial, action, reward, model, condition)
)
# ---------------- SUMMARIES ----------------
reward_sum <- combined_data %>%
group_by(model, condition, id) %>%
summarise(reward = sum(reward, na.rm = TRUE), .groups="drop")
choice_counts <- combined_data %>%
group_by(model, condition, id) %>%
summarise(X = sum(action == 0, na.rm = TRUE),
Y = sum(action == 1, na.rm = TRUE), .groups="drop")
shift_list <- combined_data %>%
group_by(model, condition, id) %>%
group_split() %>%
lapply(function(df) {
tbl <- as.data.table(df)
lst <- frame2list(tbl)
shift <- loss_shift_fun(lst)
data.frame(
id = unique(tbl$id),
loss_shift = shift$loss_mean_sub,
reward_shift = shift$reward_mean_sub,
model = unique(tbl$model),
condition = unique(tbl$condition)
)
}) %>%
bind_rows()
merged_df <- reward_sum %>%
left_join(choice_counts, by=c("model","condition","id")) %>%
left_join(shift_list, by=c("model","condition","id"))
# ---------------- CLEAN MODEL LABELS ----------------
merged_df <- merged_df %>%
mutate(model = recode(model,
"gemini-2.5-flash-lite" = "Gemini 2.5",
"deepseek-chat" = "DeepSeek",
"gpt-4.1" = "GPT-4.1",
"Human" = "Human"))
# ---------------- COLORS ----------------
dark2_colors <- c("Human"="#929eab",
"Gemini 2.5"="#84addc",
"DeepSeek"="#ffd47d",
"GPT-4.1"="#6ad1a3")
# ---------------- PLOTS ----------------
if (!dir.exists("plots")) dir.create("plots")
make_plot <- function(df, yvar, ylab, filename) {
p <- ggplot(df, aes(x=condition, y=.data[[yvar]], fill=model)) +
geom_boxplot(
width=0.15, outlier.shape=NA, alpha=0.7,
position=position_dodge(width=0.7), color="black"   # black outline for clarity
) +
geom_point(
aes(color=model),   # points colored with same palette
alpha=0.6, size=0.8, shape=1,
position=position_jitterdodge(jitter.width=0.12, dodge.width=0.7)
) +
scale_fill_manual(values=dark2_colors) +
scale_color_manual(values=dark2_colors) +
scale_x_discrete(labels=c(
"Human"="Human",
"T0.0_P0.5"="Temp=0.0, Top-p=0.5",
"T1.0_P0.5"="Temp=1.0, Top-p=0.5",
"T1.0_P1.0"="Temp=1.0, Top-p=1.0",
"T2.0_P1.0"="Temp=2.0, Top-p=1.0"
)) +
labs(x="Condition", y=ylab, fill="Model", color="Model") +
theme_bw(base_size=9) +
theme(axis.text.x=element_text(hjust=0.5))
ggsave(filename, p, width=10, height=5)
return(p)
}
# Reward
p1 <- make_plot(merged_df, "reward", "Total Reward", "plots/reward_score.pdf")
# Target choice %
p2 <- make_plot(merged_df, "X", "Target Option Count", "plots/target_option.pdf")
# Loss shift (%)
p3 <- make_plot(merged_df %>% mutate(loss_shift = loss_shift*100),
"loss_shift", "No-reward Switch %", "plots/loss_shift.pdf")
# Reward shift (%)
p4 <- make_plot(merged_df %>% mutate(reward_shift = reward_shift*100),
"reward_shift", "Reward Switch %", "plots/reward_shift.pdf")
message("Plots saved with correct legend labels in 'plots/'")
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyr)
library(patchwork)   # for combining plots
# ---------------- HELPERS ----------------
frame2list <- function(tbl) {
subj_ids <- unique(tbl$id)
lst <- list()
for (sid in subj_ids) {
DT_subj <- tbl[tbl$id == sid, ]
lst[[as.character(sid)]] <- DT_subj
}
return(lst)
}
loss_shift_fun <- function(lst) {
loss_shift <- c()
reward_shift <- c()
for (sid in names(lst)) {
DT_subj <- lst[[sid]]
choice <- DT_subj$action
reward <- DT_subj$reward
shifts <- diff(choice) != 0
loss_trials <- which(reward == 0 & seq_along(reward) < length(reward))
reward_trials <- which(reward == 1 & seq_along(reward) < length(reward))
loss_shift <- c(loss_shift, mean(shifts[loss_trials], na.rm = TRUE))
reward_shift <- c(reward_shift, mean(shifts[reward_trials], na.rm = TRUE))
}
return(list(
loss_mean_sub = loss_shift,
reward_mean_sub = reward_shift
))
}
# ---------------- HUMAN DATA ----------------
human_dynamic <- read.csv('human_data/merged_dynamic.csv')
human_static  <- read.csv('human_data/merged_static.csv')
human_combined <- rbind(human_dynamic, human_static)
human_combined$X <- NULL
colnames(human_combined) <- c("choice", "reward", "id", "block", "schedule_type")
# Force id to character
human_combined$id <- as.character(human_combined$id)
# Add metadata
human_combined$model <- "Human"
human_combined$condition <- "Human"
# ---------------- LLM DATA ----------------
all_data <- list()
for (model in models) {
for (lv in levels) {
temp <- lv$temp; topp <- lv$topp
file <- file.path("sim_data", model, "merged",
paste0(model, "-", temp, "-", topp, ".csv"))
if (!file.exists(file)) {
message("Missing file: ", file)
next
}
df <- read.csv(file)
df$id <- as.character(df$id)
df$model <- model
df$condition <- paste0("T", temp, "_P", topp)
all_data[[length(all_data) + 1]] <- df
}
}
llm_data <- bind_rows(all_data)
# ---------------- COMBINE ----------------
combined_data <- bind_rows(
human_combined %>% select(id, trial=block, action=choice, reward, model, condition),
llm_data %>% select(id, trial, action, reward, model, condition)
)
# ---------------- SUMMARIES ----------------
reward_sum <- combined_data %>%
group_by(model, condition, id) %>%
summarise(reward = sum(reward, na.rm = TRUE), .groups="drop")
choice_counts <- combined_data %>%
group_by(model, condition, id) %>%
summarise(X = sum(action == 0, na.rm = TRUE),
Y = sum(action == 1, na.rm = TRUE), .groups="drop")
shift_list <- combined_data %>%
group_by(model, condition, id) %>%
group_split() %>%
lapply(function(df) {
tbl <- as.data.table(df)
lst <- frame2list(tbl)
shift <- loss_shift_fun(lst)
data.frame(
id = unique(tbl$id),
loss_shift = shift$loss_mean_sub,
reward_shift = shift$reward_mean_sub,
model = unique(tbl$model),
condition = unique(tbl$condition)
)
}) %>%
bind_rows()
merged_df <- reward_sum %>%
left_join(choice_counts, by=c("model","condition","id")) %>%
left_join(shift_list, by=c("model","condition","id"))
# ---------------- CLEAN MODEL LABELS ----------------
merged_df <- merged_df %>%
mutate(model = recode(model,
"gemini-2.5-flash-lite" = "Gemini 2.5",
"deepseek-chat" = "DeepSeek",
"gpt-4.1" = "GPT-4.1",
"Human" = "Human"))
# Reward
p1 <- make_plot(merged_df, "reward", "Total Reward", "plots/reward_score.pdf")
# Target choice %
p2 <- make_plot(merged_df, "X", "Target Option Count", "plots/target_option.pdf")
# Loss shift (%)
p3 <- make_plot(merged_df %>% mutate(loss_shift = loss_shift*100),
"loss_shift", "No-reward Switch %", "plots/loss_shift.pdf")
# Reward shift (%)
p4 <- make_plot(merged_df %>% mutate(reward_shift = reward_shift*100),
"reward_shift", "Reward Switch %", "plots/reward_shift.pdf")
message("Plots saved with correct legend labels in 'plots/'")
# ---------------- COMBINE (1x4) ----------------
p1 <- p1 + theme(legend.position="none")
p2 <- p2 + theme(legend.position="none")
p3 <- p3 + theme(legend.position="none")
p4 <- p4 + theme(legend.position="none")
combined <- (p1 | p2) / (p3 | p4)+
plot_layout(guides="collect") & theme(legend.position="bottom")
# ---------------- SAVE ----------------
ggsave("plots/combined_comparison_2x2.pdf", combined, width=14, height=10)
ggsave("plots/combined_comparison_2x2.png", combined, width=14, height=10, dpi=300)
message("Combined 2x2 plot with shared legend saved in 'plots/'")
# ---------------- SAVE ----------------
ggsave("plots/combined_comparison_2x2.pdf", combined, width=14, height=10)
ggsave("plots/combined_comparison_2x2.png", combined, width=14, height=10, dpi=300)
